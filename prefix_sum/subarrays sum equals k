Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2



// nums            1       1       1  
// index           0       1       2
// preSum     0    1       2       3     ->    preSum[i] = nums[0] + nums[1] + ... + nums[i - 1] + nums[i]

// preSum[i] = nums[0] + nums[1] + ... + nums[i - 1] + nums[i]

// Assume there is a # j which i < j:
// preSum[j] = nums[0] + nums[1] + ... + nums[i - 1] + nums[i] + ... + nums[j]

// 1   2   2   3   4   5
// Sum of nums[i] to nums[j] = preSum[j] - preSum[i - 1] -> = k
// preSum[j] - preSum[i - 1] = k
//             preSum[i - 1] = k - preSum[j]
    
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> mp; //preSum, freq
        int preSum = 0;
        
        mp[0] = 1;  //initial
        int ans = 0;
        
        for (int n : nums) {
            preSum += n;
            //if there exist a number x in the map that (pre - x = k) -> x = pre - k
            if (mp.count(preSum - k)) {
                ans += mp[preSum - k]; //why mp[pre-k] instead ans++?
            }
            mp[preSum]++;  //uodate map;
        }
        return ans;
    }
};
